# -*- coding: utf-8 -*-
"""Customer Behavior Analysis Using Python

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RkVC8Pvf1C4j2zVox-54H4ypAW0Y5kTx

# **Customer Behaviour Analysis using Python**

### This project aims to explore and analyze customer behavior using the Online Retail dataset from Kaggle. The dataset contains transactions from a UK-based online retail store and includes information such as customer ID, country, product description, quantity, unit price, and invoice date.

### The objective of this project is to uncover insights that can help in:

* Understanding purchasing patterns

* Segmenting customers based on value

* Identifying high-performing countries

* Visualizing the customer conversion funnel

* Estimating customer churn rate

###Through data preprocessing, aggregation, and visual analysis using Python libraries like pandas, plotly, and seaborn, we build a strong foundation for data-driven decision making in a retail business.

---
"""

import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

data = pd.read_csv('data.csv', encoding='ISO-8859-1')
print(data.head())

"""---

**Summary Statistics for Numeric Columns**

We begin by understanding the dataset through summary statistics of numeric columns. This gives us insights into the distribution, central tendency, and variability of features like Quantity, Unit Price, and Total Price.
"""

# Summary statistics for numeric columns
numeric_summary = data.describe()
print(numeric_summary)

"""---

**Summary Statistics for Non-Numeric (Categorical) Columns**

We analyze non-numeric columns such as `Country`, `Description`, and `InvoiceNo` to explore unique values, common categories, and potential data quality issues.
"""

# Summary for non-numeric columns
categorical_summary = data.describe(include='object')
print(categorical_summary)

"""---

**Create TotalPrice Column**

To calculate total revenue per line item, we add a new column `TotalPrice` using the formula:
"""

# Ensure TotalPrice is created
data['TotalPrice'] = data['Quantity'] * data['UnitPrice']

# Plot histogram for TotalPrice
import plotly.express as px
fig = px.histogram(data, x='TotalPrice', nbins=50, title='Distribution of Transaction Total Prices')
fig.update_layout(xaxis_title='Total Price (£)', yaxis_title='Number of Transactions')
fig.update_layout(width=1000, height=350)
fig.show()

"""---

**Customer Distribution by Country**

We visualize how customers are distributed across countries using a bar chart. This helps identify top contributing countries and market opportunities.
"""

country_counts = data['Country'].value_counts().reset_index()
country_counts.columns = ['Country', 'Count']
fig = px.bar(country_counts, x='Country', y='Count', title='Customer Distribution by Country')
fig.update_layout(width=1000, height=350)
fig.show()

"""---

**Quantity vs. Unit Price (Scatter Plot)**

We create a scatter plot to examine the relationship between the quantity of products purchased and their unit price. This may reveal pricing patterns or outliers in the data.
"""

fig = px.scatter(data, x='Quantity', y='UnitPrice',
                 title='Quantity vs. Unit Price',
                 trendline='ols')
fig.update_layout(width=1000, height=350)
fig.show()

"""---

**Average Quantity Purchased by Country**

This step groups data by `Country` and computes the average quantity purchased. We then visualize the top 10 countries by this metric to identify high-volume regions.
"""

import plotly.express as px

# Calculate average quantity purchased by country
country_grouped = data.groupby('Country')['Quantity'].mean().reset_index()
country_grouped.columns = ['Country', 'Average_Quantity']

# Plot top 10 countries by average quantity
fig = px.bar(country_grouped.sort_values(by='Average_Quantity', ascending=False).head(10),
             x='Country', y='Average_Quantity',
             title='Top 10 Countries by Average Quantity Purchased')
fig.show()

"""---

**Customer Segmentation by CLV**

We calculate Customer Lifetime Value (CLV) by summing the total purchase value per `CustomerID`. Customers are segmented into Low, Medium, and High value groups based on their CLV, and we visualize the distribution.
"""

data['TotalPrice'] = data['Quantity'] * data['UnitPrice']
clv = data.groupby('CustomerID')['TotalPrice'].sum().reset_index()
clv.columns = ['CustomerID', 'CLV']

import pandas as pd
import plotly.express as px

# Define segments
clv['Segment'] = pd.cut(clv['CLV'], bins=[0, 100, 500, float('inf')],
                        labels=['Low Value', 'Medium Value', 'High Value'])

# Count customers in each segment
segment_counts = clv['Segment'].value_counts().reset_index()
segment_counts.columns = ['Segment', 'Count']

# Plot
fig = px.bar(segment_counts, x='Segment', y='Count',
             title='Customer Segmentation by CLV')
fig.update_xaxes(title='Segment')
fig.update_yaxes(title='Number of Customers')
fig.update_layout(width=1000, height=350)
fig.show()

"""---

**Customer Conversion Funnel**

We simulate a conversion funnel using three metrics:
- Unique Customers
- Unique Transactions (Invoices)
- Total Quantity Purchased

This funnel shows how customer engagement progresses through the purchase process.
"""

import pandas as pd
import plotly.express as px

# Calculate funnel values
num_customers = data['CustomerID'].nunique()
num_transactions = data['InvoiceNo'].nunique()
total_quantity = data['Quantity'].sum()

# Create funnel dataframe using pd.DataFrame directly
funnel_df = pd.DataFrame({
    'stage': ['Unique Customers', 'Unique Transactions', 'Total Quantity Purchased'],
    'count': [num_customers, num_transactions, total_quantity]
})

# Plot funnel
fig = px.funnel(funnel_df, x='count', y='stage', title='Customer Conversion Funnel')
fig.update_layout(width=1000, height=350)
fig.show()

"""---

**Churn Rate Calculation**

Churn is defined as customers who haven’t made a purchase in the last 6 months. We calculate the churn rate as the percentage of such customers out of the total. This metric helps identify customer retention issues.
"""

import pandas as pd

# Convert InvoiceDate to datetime if not already
data['InvoiceDate'] = pd.to_datetime(data['InvoiceDate'])

# Define cutoff date for churn (e.g., 6 months before last date)
cutoff_date = data['InvoiceDate'].max() - pd.DateOffset(months=6)

# Get last purchase date per customer
last_purchase = data.groupby('CustomerID')['InvoiceDate'].max().reset_index()

# Mark churned customers (no purchase after cutoff)
last_purchase['Churned'] = last_purchase['InvoiceDate'] < cutoff_date

# Calculate churn rate
churn_rate = last_purchase['Churned'].mean()

print(f"Churn Rate: {churn_rate:.2%}")

"""---

# **Conclusion**

### In this project, we conducted a comprehensive analysis of customer behavior by leveraging key metrics such as total purchase value, average quantity, and customer segmentation. Here’s a quick summary of the insights derived:

### United Kingdom contributed the most transactions, while several other countries showed high average purchase quantities.

### The Quantity vs. Unit Price analysis highlighted potential outliers or bulk discounts.

### We created Customer Lifetime Value (CLV) segments to categorize customers into Low, Medium, and High value groups.

### A conversion funnel simulated how customers move from unique visits to completed purchases.

### Finally, we estimated the customer churn rate by identifying those inactive for over 6 months — a valuable metric for retention planning.

### These insights can help businesses target marketing campaigns, design loyalty programs, and optimize sales strategies for higher customer retention and revenue growth.

---
"""